__declspec用法
https://blog.csdn.net/reasonyuanrobot/article/details/83868080

GetCommandLine CmdLineToArgvW用法
https://blog.csdn.net/as1406131/article/details/101914741?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param



//命令行参数处理
	LPWSTR cmd = GetCommandLineW();//获取命令行字段 (优化cmd 去掉尾部"  添加 其他参数项)
	int iSize;
	char* pszMultiByte;
	iSize = WideCharToMultiByte(CP_ACP, 0, cmd, -1, NULL, 0, NULL, NULL);
	pszMultiByte = (char*)malloc(iSize * sizeof(char));
	WideCharToMultiByte(CP_ACP, 0, cmd, -1, pszMultiByte, iSize, NULL, NULL);//LPWSTR/wchar_t* ----> char*
	iSize = strlen(pszMultiByte);
	char RpszMultiByte[256];
	memset(RpszMultiByte, 0, sizeof(RpszMultiByte));
	strncpy(RpszMultiByte, pszMultiByte, (iSize - 2));
	//去除两头的"
	Topsec(RpszMultiByte, '"');
	strcat(RpszMultiByte, " /u:Administrator /p: /v:10.30.15.197 /sound /microphone");

	WCHAR Temp[256] = { 0 };
	mbstowcs(Temp, RpszMultiByte, strlen(RpszMultiByte)); //char* ----> LPWSTR/wchar_t*

//添加可以自定义输入参数的控件，并返回数据到cmd进行解析
if (!args || (argc <= 1))
	{
		/*
			MessageBoxA(0, "第一个C窗体程序", "消息", 3);
			//参数1：系统弹出
			//	参数2：消息内容
			//	参数3：标题
			//	参数4：对话框的类型
			//	0  只有 确定 按钮；
			//	1  确定 取消 按钮；
			//	2  终止 重试 忽略 按钮
			//	3  是 否 取消 按钮
		*/
		int WRdpRet;
		WRdpRet = MessageBoxA(0, (LPCSTR)("参数过少，请检查参数后重新输入："), (LPCSTR)("警告"), MB_YESNO | MB_ICONQUESTION);
		if (WRdpRet == 6)
		{
			static TCHAR szClassName[] = TEXT("Hello@FreeRdp"); //窗口类名
			HWND hwnd;                                     //窗口句柄
			MSG msg;                                       //消息
			WNDCLASS wndclass;                             // 窗口类

			hInst = hInstance;

			/**********第①步：注册窗口类**********/
			//为窗口类的各个字段赋值
			wndclass.style = CS_HREDRAW | CS_VREDRAW;                     //窗口风格
			wndclass.lpfnWndProc = WndProc;                               //窗口过程
			wndclass.cbClsExtra = 0;                                      //暂时不需要理解
			wndclass.cbWndExtra = 0;                                      //暂时不需要理解
			wndclass.hInstance = hInstance;                               //当前窗口句柄
			wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);             //窗口图标
			wndclass.hCursor = LoadIcon(NULL, IDC_ARROW);                 //鼠标样式
			wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //窗口背景画刷
			wndclass.lpszMenuName = NULL;                                 //窗口菜单
			wndclass.lpszClassName = szClassName;                         // 窗口类名

			//注册窗口
			RegisterClass(&wndclass);

			/*****第②步：创建窗口(并让窗口显示出来)*****/
			hwnd = CreateWindow(szClassName,                //窗口类的名字
			                    TEXT("Welcome To FreeRdp"), //窗口标题（出现在标题栏）
			                    WS_OVERLAPPEDWINDOW,        //窗口风格
			                    CW_USEDEFAULT,              //初始化时x轴的位置
			                    CW_USEDEFAULT,              //初始化时y轴的位置
			                    500,                        //窗口宽度
			                    300,                        //窗口高度
			                    NULL,                       //父窗口句柄
			                    NULL,                       //窗口菜单句柄
			                    hInstance,                  //当前窗口的句柄
			                    NULL                        //不使用该值
			);

			//显示窗口
			ShowWindow(hwnd, nCmdShow);
			//更新（绘制）窗口
			UpdateWindow(hwnd);

			/**********第③步：消息循环**********/
			while (GetMessage(&msg, NULL, 0, 0))
			{
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}			


			//wchar_t sztitle[32];
			//SendMessage(hedit, WM_GETTEXT, 32, (LPARAM)sztitle);

			//重新输入命令行参数字段								
			cmd = GetCommandLineW(); //获取命令行字段

			if (!cmd)
				goto out;

			args = CommandLineToArgvW(cmd, &argc); //传递所有参数并计数
		}
		else
			goto out;
	}
	
	
/**********第④步：窗口过程**********/
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam, LPWSTR RdpCmd)
{
	HDC hdc;        //设备环境句柄
	PAINTSTRUCT ps; //存储绘图环境的相关信息
	int wmId, wmEvent;

	static HFONT hFont;        //逻辑字体
	static HWND hLabUsername;  //静态文本框--用户名
	static HWND hLabPassword;  //静态文本框--密码
	static HWND hLabIp;        //静态文本框--Ip
	static HWND hEditUsername; //单行文本输入框
	static HWND hEditPassword; //密码输入框
	static HWND hEditIp;       //Ip地址输入框
	static HWND hBtnLogin;     //登录按钮
	
	//定义缓冲区
	TCHAR szUsername[100];
	TCHAR szPassword[100];
	TCHAR szIp[100];
	TCHAR szUserInfo[200];

	switch (message)
	{
		case WM_CREATE:
			//创建逻辑字体
			hFont = CreateFont(-14 /*高*/, -7 /*宽*/, 0, 0, 400 /*一般这个值设为400*/,
			                   FALSE /*斜体?*/, FALSE /*下划线?*/, FALSE /*删除线?*/,
			                   DEFAULT_CHARSET, OUT_CHARACTER_PRECIS, CLIP_CHARACTER_PRECIS,
			                   DEFAULT_QUALITY, FF_DONTCARE, TEXT("微软雅黑"));

			//创建静态文本框控件--用户名
			hLabUsername = CreateWindow(
			    TEXT("static"), TEXT("用户名："),
			    WS_CHILD | WS_VISIBLE | SS_CENTERIMAGE /*垂直居中*/ | SS_RIGHT /*水平居右*/,
			    0 /*x坐标*/, 20 /*y坐标*/, 70 /*宽度*/, 26 /*高度*/, hWnd /*父窗口句柄*/,
			    (HMENU)1 /*控件ID*/, hInst /*当前程序实例句柄*/, NULL);

			//创建静态文本框控件--密码
			hLabPassword = CreateWindow(TEXT("static"), TEXT("密码："),
			                            WS_CHILD | WS_VISIBLE | SS_CENTERIMAGE /*垂直居中*/ |
			                                SS_RIGHT /*水平居右*/,
			                            0, 56, 70, 26, hWnd, (HMENU)2, hInst, NULL);
			//创建静态文本框控件--ip
			hLabIp = CreateWindow(TEXT("static"), TEXT("IP："),
			                            WS_CHILD | WS_VISIBLE | SS_CENTERIMAGE /*垂直居中*/ |
			                                SS_RIGHT /*水平居右*/,
			                            0, 92, 70, 26, hWnd, (HMENU)3, hInst, NULL);
			//创建单行文本框控件
			hEditUsername = CreateWindow(TEXT("edit"), TEXT(""),
			                             WS_CHILD | WS_VISIBLE | WS_BORDER /*边框*/ |
			                                 ES_AUTOHSCROLL /*水平滚动*/,
			                             80, 20, 200, 26, hWnd, (HMENU)4, hInst, NULL);
			//创建密码输入框
			hEditPassword = CreateWindow(TEXT("edit"), TEXT(""),
			                             WS_CHILD | WS_VISIBLE | WS_BORDER | //ES_PASSWORD /*密码*/ |
			                                 ES_AUTOHSCROLL /*水平滚动*/,
			                             80, 56, 200, 26, hWnd, (HMENU)5, hInst, NULL);
			//创建Ip地址输入框
			hEditIp = CreateWindow(TEXT("edit"), TEXT(""),
			                             WS_CHILD | WS_VISIBLE | WS_BORDER | //ES_PASSWORD /*密码*/ |
			                                 ES_AUTOHSCROLL /*水平滚动*/,
			                             80, 92, 200, 26, hWnd, (HMENU)6, hInst, NULL);
			//需要添加一个明文查看按钮

			//创建按钮控件
			hBtnLogin = CreateWindow(TEXT("button"), TEXT("连接"),
			                         WS_CHILD | WS_VISIBLE | WS_BORDER | BS_FLAT /*扁平样式*/, 80,
			                         128, 200, 46, hWnd, (HMENU)7, hInst, NULL);

			//依次设置控件的字体
			SendMessage(hLabUsername, WM_SETFONT, (WPARAM)hFont, NULL);
			SendMessage(hLabPassword, WM_SETFONT, (WPARAM)hFont, NULL);
			SendMessage(hLabIp, WM_SETFONT, (WPARAM)hFont, NULL);
			SendMessage(hEditUsername, WM_SETFONT, (WPARAM)hFont, NULL);
			SendMessage(hEditPassword, WM_SETFONT, (WPARAM)hFont, NULL);
			SendMessage(hEditIp, WM_SETFONT, (WPARAM)hFont, NULL);
			SendMessage(hBtnLogin, WM_SETFONT, (WPARAM)hFont, NULL);
			break;

		case WM_COMMAND:
			wmId = LOWORD(wParam);
			wmEvent = HIWORD(wParam);
			switch (wmId)
			{
				case 7: //按钮的HMENU参数
					//获取输入框的数据
					GetWindowText(hEditUsername, szUsername, 100);
					GetWindowText(hEditPassword, szPassword, 100);
					GetWindowText(hEditIp, szIp, 100);
					wsprintf(szUserInfo, TEXT("提示：\r\n您连接的用户账号：%s\r\n您连接的用户密码：%s\r\n您连接的Ip地址：%s"),
					         szUsername, szPassword, szIp);
					RdpCmd = szUserInfo;
					MessageBox(hWnd, szUserInfo, TEXT("信息提示"), MB_ICONINFORMATION);
					break;
				default:
					return DefWindowProc(hWnd, message, wParam, lParam);
			}
			break;

		case WM_PAINT:                   //窗口绘制消息
			hdc = BeginPaint(hWnd, &ps); //开始绘图并返回环境句柄
			// TODO:  在此添加任意绘图代码...
			EndPaint(hWnd, &ps); //结束绘图并释放环境句柄
			break;

		case WM_DESTROY:         //窗口销毁消息
			DeleteObject(hFont); //删除创建的字体
			PostQuitMessage(0);
			break;

		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}


2020.11.05
cmdline.c--->82----->//判断cmd获取的命令行参数个数
